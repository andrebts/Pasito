/* The following code was generated by JFlex 1.3.5 on 10/28/17 10:36 AM */

package pasito.syntax;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;
import java.util.regex.Pattern;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 10/28/17 10:36 AM from the specification file
 * <tt>file:/C:/Users/Andre/Documents/UFS/LFT/Pasito_Prof/PasitoCompilador/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\10\1\3\1\1\1\0\1\3\1\1\16\10\4\0\1\3\1\40"+
    "\2\0\1\7\1\0\1\37\1\0\1\42\1\43\1\6\1\36\1\52"+
    "\1\26\1\25\1\5\1\11\3\13\4\12\2\4\1\51\1\53\1\44"+
    "\1\41\3\0\4\14\1\16\1\32\15\7\1\27\3\7\1\15\2\7"+
    "\1\45\1\0\1\46\1\0\1\7\1\0\1\33\1\54\1\61\1\60"+
    "\1\23\1\56\1\65\1\64\1\55\2\7\1\34\1\7\1\22\1\21"+
    "\1\20\1\7\1\30\1\35\1\24\1\31\1\57\1\63\1\17\1\62"+
    "\1\7\1\47\1\2\1\50\1\0\41\10\2\0\4\7\4\0\1\7"+
    "\2\0\1\10\7\0\1\7\4\0\1\7\5\0\27\7\1\0\37\7"+
    "\1\0\u01ca\7\4\0\14\7\16\0\5\7\7\0\1\7\1\0\1\7"+
    "\21\0\160\10\5\7\1\0\2\7\2\0\4\7\10\0\1\7\1\0"+
    "\3\7\1\0\1\7\1\0\24\7\1\0\123\7\1\0\213\7\1\0"+
    "\5\10\2\0\236\7\11\0\46\7\2\0\1\7\7\0\47\7\7\0"+
    "\1\7\1\0\55\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\1\10\10\0\33\7\5\0\3\7\15\0\5\10\6\0\1\7\4\0"+
    "\13\10\5\0\53\7\37\10\4\0\2\7\1\10\143\7\1\0\1\7"+
    "\10\10\1\0\6\10\2\7\2\10\1\0\4\10\2\7\12\10\3\7"+
    "\2\0\1\7\17\0\1\10\1\7\1\10\36\7\33\10\2\0\131\7"+
    "\13\10\1\7\16\0\12\10\41\7\11\10\2\7\4\0\1\7\5\0"+
    "\26\7\4\10\1\7\11\10\1\7\3\10\1\7\5\10\22\0\31\7"+
    "\3\10\104\0\1\7\1\0\13\7\67\0\33\10\1\0\4\10\66\7"+
    "\3\10\1\7\22\10\1\7\7\10\12\7\2\10\2\0\12\10\1\0"+
    "\7\7\1\0\7\7\1\0\3\10\1\0\10\7\2\0\2\7\2\0"+
    "\26\7\1\0\7\7\1\0\1\7\3\0\4\7\2\0\1\10\1\7"+
    "\7\10\2\0\2\10\2\0\3\10\1\7\10\0\1\10\4\0\2\7"+
    "\1\0\3\7\2\10\2\0\12\10\4\7\7\0\1\7\5\0\3\10"+
    "\1\0\6\7\4\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7"+
    "\1\0\2\7\1\0\2\7\2\0\1\10\1\0\5\10\4\0\2\10"+
    "\2\0\3\10\3\0\1\10\7\0\4\7\1\0\1\7\7\0\14\10"+
    "\3\7\1\10\13\0\3\10\1\0\11\7\1\0\3\7\1\0\26\7"+
    "\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\10\1\7\10\10"+
    "\1\0\3\10\1\0\3\10\2\0\1\7\17\0\2\7\2\10\2\0"+
    "\12\10\1\0\1\7\17\0\3\10\1\0\10\7\2\0\2\7\2\0"+
    "\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\10\1\7"+
    "\7\10\2\0\2\10\2\0\3\10\10\0\2\10\4\0\2\7\1\0"+
    "\3\7\2\10\2\0\12\10\1\0\1\7\20\0\1\10\1\7\1\0"+
    "\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\3\0\3\7\3\0\14\7\4\0\5\10\3\0"+
    "\3\10\1\0\4\10\2\0\1\7\6\0\1\10\16\0\12\10\11\0"+
    "\1\7\7\0\3\10\1\0\10\7\1\0\3\7\1\0\27\7\1\0"+
    "\12\7\1\0\5\7\3\0\1\7\7\10\1\0\3\10\1\0\4\10"+
    "\7\0\2\10\1\0\2\7\6\0\2\7\2\10\2\0\12\10\22\0"+
    "\2\10\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0"+
    "\5\7\2\0\1\10\1\7\7\10\1\0\3\10\1\0\4\10\7\0"+
    "\2\10\7\0\1\7\1\0\2\7\2\10\2\0\12\10\1\0\2\7"+
    "\17\0\2\10\1\0\10\7\1\0\3\7\1\0\51\7\2\0\1\7"+
    "\7\10\1\0\3\10\1\0\4\10\1\7\10\0\1\10\10\0\2\7"+
    "\2\10\2\0\12\10\12\0\6\7\2\0\2\10\1\0\22\7\3\0"+
    "\30\7\1\0\11\7\1\0\1\7\2\0\7\7\3\0\1\10\4\0"+
    "\6\10\1\0\1\10\1\0\10\10\22\0\2\10\15\0\60\7\1\10"+
    "\2\7\7\10\4\0\10\7\10\10\1\0\12\10\47\0\2\7\1\0"+
    "\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0"+
    "\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0"+
    "\4\7\1\10\2\7\6\10\1\0\2\10\1\7\2\0\5\7\1\0"+
    "\1\7\1\0\6\10\2\0\12\10\2\0\4\7\40\0\1\7\27\0"+
    "\2\10\6\0\12\10\13\0\1\10\1\0\1\10\1\0\1\10\4\0"+
    "\2\10\10\7\1\0\44\7\4\0\24\10\1\0\2\10\5\7\13\10"+
    "\1\0\44\10\11\0\1\10\71\0\53\7\24\10\1\7\12\10\6\0"+
    "\6\7\4\10\4\7\3\10\1\7\3\10\2\7\7\10\3\7\4\10"+
    "\15\7\14\10\1\7\17\10\2\0\46\7\1\0\1\7\5\0\1\7"+
    "\2\0\53\7\1\0\u014d\7\1\0\4\7\2\0\7\7\1\0\1\7"+
    "\1\0\4\7\2\0\51\7\1\0\4\7\2\0\41\7\1\0\4\7"+
    "\2\0\7\7\1\0\1\7\1\0\4\7\2\0\17\7\1\0\71\7"+
    "\1\0\4\7\2\0\103\7\2\0\3\10\40\0\20\7\20\0\125\7"+
    "\14\0\u026c\7\2\0\21\7\1\0\32\7\5\0\113\7\3\0\3\7"+
    "\17\0\15\7\1\0\4\7\3\10\13\0\22\7\3\10\13\0\22\7"+
    "\2\10\14\0\15\7\1\0\3\7\1\0\2\10\14\0\64\7\40\10"+
    "\3\0\1\7\3\0\2\7\1\10\2\0\12\10\41\0\3\10\2\0"+
    "\12\10\6\0\130\7\10\0\51\7\1\10\1\7\5\0\106\7\12\0"+
    "\35\7\3\0\14\10\4\0\14\10\12\0\12\10\36\7\2\0\5\7"+
    "\13\0\54\7\4\0\21\10\7\7\2\10\6\0\12\10\46\0\27\7"+
    "\5\10\4\0\65\7\12\10\1\0\35\10\2\0\13\10\6\0\12\10"+
    "\15\0\1\7\130\0\5\10\57\7\21\10\7\7\4\0\12\10\21\0"+
    "\11\10\14\0\3\10\36\7\15\10\2\7\12\10\54\7\16\10\14\0"+
    "\44\7\24\10\10\0\12\10\3\0\3\7\12\10\44\7\122\0\3\10"+
    "\1\0\25\10\4\7\1\10\4\7\3\10\2\7\11\0\300\7\47\10"+
    "\25\0\4\10\u0116\7\2\0\6\7\2\0\46\7\2\0\6\7\2\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\37\7\2\0"+
    "\65\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0"+
    "\4\7\2\0\6\7\4\0\15\7\5\0\3\7\1\0\7\7\16\0"+
    "\5\10\32\0\5\10\20\0\2\7\23\0\1\7\13\0\5\10\5\0"+
    "\6\10\1\0\1\7\15\0\1\7\20\0\15\7\3\0\33\7\25\0"+
    "\15\10\4\0\1\10\3\0\14\10\21\0\1\7\4\0\1\7\2\0"+
    "\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0"+
    "\1\7\21\0\51\7\u0a77\0\57\7\1\0\57\7\1\0\205\7\6\0"+
    "\4\7\3\10\2\7\14\0\46\7\1\0\1\7\5\0\1\7\2\0"+
    "\70\7\7\0\1\7\17\0\1\10\27\7\11\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\40\10\57\0\1\7\u01d5\0\3\7\31\0\11\7"+
    "\6\10\1\0\5\7\2\0\5\7\4\0\126\7\2\0\2\10\2\0"+
    "\3\7\1\0\132\7\1\0\4\7\5\0\51\7\3\0\136\7\21\0"+
    "\33\7\65\0\20\7\u0200\0\u19b6\7\112\0\u51cd\7\63\0\u048d\7\103\0"+
    "\56\7\2\0\u010d\7\3\0\20\7\12\10\2\7\24\0\57\7\1\10"+
    "\4\0\12\10\1\0\31\7\7\0\1\10\120\7\2\10\45\0\11\7"+
    "\2\0\147\7\2\0\4\7\1\0\4\7\14\0\13\7\115\0\12\7"+
    "\1\10\3\7\1\10\4\7\1\10\27\7\5\10\20\0\1\7\7\0"+
    "\64\7\14\0\2\10\62\7\21\10\13\0\12\10\6\0\22\10\6\7"+
    "\3\0\1\7\4\0\12\10\34\7\10\10\2\0\27\7\15\10\14\0"+
    "\35\7\3\0\4\10\57\7\16\10\16\0\1\7\12\10\46\0\51\7"+
    "\16\10\11\0\3\7\1\10\10\7\2\10\2\0\12\10\6\0\27\7"+
    "\3\0\1\7\1\10\4\0\60\7\1\10\1\7\3\10\2\7\2\10"+
    "\5\7\2\10\1\7\1\10\1\7\30\0\3\7\2\0\13\7\5\10"+
    "\2\0\3\7\2\10\12\0\6\7\2\0\6\7\2\0\6\7\11\0"+
    "\7\7\1\0\7\7\221\0\43\7\10\10\1\0\2\10\2\0\12\10"+
    "\6\0\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0\u016e\7\2\0\152\7"+
    "\46\0\7\7\14\0\5\7\5\0\1\7\1\10\12\7\1\0\15\7"+
    "\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\154\7"+
    "\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0\15\7\3\0\20\10"+
    "\20\0\7\10\14\0\2\7\30\0\3\7\31\0\1\7\6\0\5\7"+
    "\1\0\207\7\2\0\1\10\4\0\1\7\13\0\12\10\7\0\32\7"+
    "\4\0\1\7\1\0\32\7\13\0\131\7\3\0\6\7\2\0\6\7"+
    "\2\0\6\7\2\0\3\7\3\0\2\7\3\0\2\7\22\0\3\10"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    54,   108,   108,   108,   162,   216,   108,   270,   324, 
      378,   432,   486,   108,   540,   594,   648,   702,   108,   756, 
      108,   810,   108,   108,   108,   108,   108,   108,   108,   864, 
      108,   108,   918,   972,  1026,  1080,  1134,  1188,  1242,  1296, 
     1350,  1404,  1458,  1512,  1566,  1620,  1674,  1728,  1782,  1836, 
     1890,  1944,  1998,  2052,  2106,  2160,  2214,   108,   108,   108, 
     2268,  2322,   270,  2376,  2430,  2484,  2538,  2592,  2646,  2700, 
     2754,  2808,  2862,  2916,  2970,  3024,  1674,  3078,  3132,  3186, 
      108,  3240,  3294,  3348,  3402,  3456,  3510,  3564,  3618,   270, 
     3672,  3726,  3780,   270,  3834,  3888,  3942,  3996,  4050,  4050, 
     4104,  4158,   270,   270,   270,   270,  4212,  4266,  4320,  4374, 
      270,  4428,   270,  4482,  4536,  4590,  4644,  4698,   270,  4752, 
     4806,  4860,  4914,   270,  4968,  5022,  5076,  5130,   270,   270, 
     5184,   270,  5238,  5292,  5346,   270,   270,   270,  5400,  5454, 
     5508,  5562,  5616,  5670,  5724,  5778,   270,  5832,  5886,  5940, 
     5994,  6048,   108,  6102,  6156,   270,  6210,  6264,   108,  6318, 
     6372,   270,  6426,  6480,  6534,  6588,  1458
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\2\6\7\11\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\11\1\21\2\11\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\4\11\66\3\72\0\1\6\4\0\3\6\2\0"+
    "\1\47\6\0\1\50\45\0\1\51\1\52\63\0\1\11"+
    "\2\0\16\11\2\0\7\11\16\0\12\11\4\0\1\53"+
    "\4\0\1\54\1\55\1\56\1\0\1\57\1\47\1\57"+
    "\5\0\1\50\44\0\1\11\2\0\16\11\2\0\5\11"+
    "\1\60\1\11\16\0\12\11\4\0\1\11\2\0\16\11"+
    "\2\0\1\11\1\61\5\11\16\0\6\11\1\62\3\11"+
    "\4\0\1\50\4\0\3\50\11\0\1\63\44\0\1\11"+
    "\2\0\16\11\2\0\1\11\1\64\5\11\16\0\12\11"+
    "\4\0\1\11\2\0\14\11\1\65\1\11\2\0\4\11"+
    "\1\66\2\11\16\0\12\11\4\0\1\11\2\0\16\11"+
    "\2\0\4\11\1\67\2\11\16\0\12\11\4\0\1\11"+
    "\2\0\15\11\1\70\2\0\7\11\16\0\7\11\1\71"+
    "\2\11\37\0\1\72\67\0\1\73\65\0\1\74\30\0"+
    "\1\11\2\0\12\11\1\75\3\11\2\0\7\11\16\0"+
    "\12\11\4\0\1\11\2\0\13\11\1\76\2\11\2\0"+
    "\7\11\16\0\2\11\1\77\7\11\4\0\1\11\2\0"+
    "\12\11\1\100\3\11\2\0\2\11\1\101\1\11\1\102"+
    "\1\103\1\11\16\0\12\11\4\0\1\11\2\0\16\11"+
    "\2\0\4\11\1\104\2\11\16\0\12\11\4\0\1\11"+
    "\2\0\14\11\1\105\1\11\2\0\7\11\16\0\12\11"+
    "\4\0\1\11\2\0\12\11\1\106\3\11\2\0\4\11"+
    "\1\107\2\11\16\0\12\11\17\0\1\110\52\0\1\50"+
    "\4\0\3\50\2\0\1\111\4\0\1\111\42\0\1\51"+
    "\1\5\64\51\6\52\1\112\57\52\4\0\1\53\4\0"+
    "\3\53\2\0\1\47\6\0\1\50\44\0\1\53\4\0"+
    "\1\54\1\55\1\56\2\0\1\47\6\0\1\50\44\0"+
    "\1\53\4\0\3\113\2\0\1\47\6\0\1\50\44\0"+
    "\1\53\4\0\3\55\2\0\1\47\6\0\1\50\44\0"+
    "\1\114\4\0\1\115\3\114\1\0\1\114\4\0\1\114"+
    "\6\0\2\114\20\0\1\114\1\0\1\114\1\0\2\114"+
    "\10\0\1\11\2\0\16\11\2\0\6\11\1\116\16\0"+
    "\12\11\4\0\1\11\2\0\16\11\2\0\2\11\1\117"+
    "\4\11\16\0\12\11\4\0\1\11\2\0\11\11\1\120"+
    "\4\11\2\0\7\11\16\0\12\11\25\0\1\121\44\0"+
    "\1\11\2\0\16\11\2\0\2\11\1\122\4\11\16\0"+
    "\12\11\4\0\1\11\2\0\15\11\1\123\2\0\7\11"+
    "\16\0\12\11\4\0\1\11\2\0\13\11\1\124\2\11"+
    "\2\0\7\11\16\0\12\11\4\0\1\11\2\0\16\11"+
    "\2\0\5\11\1\125\1\11\16\0\12\11\4\0\1\11"+
    "\2\0\16\11\2\0\1\11\1\126\5\11\16\0\12\11"+
    "\4\0\1\11\2\0\16\11\2\0\7\11\16\0\1\11"+
    "\1\127\10\11\4\0\1\11\2\0\12\11\1\130\3\11"+
    "\2\0\7\11\16\0\12\11\4\0\1\11\2\0\15\11"+
    "\1\131\2\0\7\11\16\0\12\11\4\0\1\11\2\0"+
    "\16\11\2\0\1\11\1\132\5\11\16\0\12\11\4\0"+
    "\1\11\2\0\13\11\1\133\2\11\2\0\7\11\16\0"+
    "\12\11\4\0\1\11\2\0\16\11\2\0\5\11\1\134"+
    "\1\11\16\0\12\11\4\0\1\11\2\0\12\11\1\135"+
    "\3\11\2\0\7\11\16\0\12\11\4\0\1\11\2\0"+
    "\16\11\2\0\1\11\1\136\5\11\16\0\12\11\4\0"+
    "\1\11\2\0\16\11\2\0\7\11\16\0\2\11\1\137"+
    "\7\11\4\0\1\11\2\0\13\11\1\140\2\11\2\0"+
    "\7\11\16\0\12\11\4\0\1\11\2\0\16\11\2\0"+
    "\6\11\1\141\16\0\12\11\20\0\1\142\51\0\1\143"+
    "\4\0\3\143\12\0\1\144\7\0\1\144\27\0\5\52"+
    "\1\5\1\112\57\52\4\0\1\53\4\0\3\145\2\0"+
    "\1\47\6\0\1\50\44\0\1\146\4\0\4\146\1\0"+
    "\1\146\4\0\1\146\6\0\2\146\20\0\1\146\1\0"+
    "\1\146\1\0\2\146\10\0\1\11\2\0\14\11\1\147"+
    "\1\11\2\0\7\11\16\0\12\11\4\0\1\11\2\0"+
    "\14\11\1\150\1\11\2\0\7\11\16\0\12\11\4\0"+
    "\1\11\2\0\14\11\1\151\1\11\2\0\7\11\16\0"+
    "\12\11\4\0\1\11\2\0\14\11\1\152\1\11\2\0"+
    "\7\11\16\0\12\11\4\0\1\11\2\0\16\11\2\0"+
    "\2\11\1\153\4\11\16\0\12\11\4\0\1\11\2\0"+
    "\16\11\2\0\7\11\16\0\11\11\1\154\4\0\1\11"+
    "\2\0\16\11\2\0\6\11\1\122\16\0\12\11\4\0"+
    "\1\11\2\0\16\11\2\0\2\11\1\155\4\11\16\0"+
    "\12\11\4\0\1\11\2\0\15\11\1\156\2\0\7\11"+
    "\16\0\12\11\4\0\1\11\2\0\16\11\2\0\5\11"+
    "\1\157\1\11\16\0\12\11\4\0\1\11\2\0\14\11"+
    "\1\160\1\11\2\0\7\11\16\0\12\11\4\0\1\11"+
    "\2\0\16\11\2\0\7\11\16\0\5\11\1\161\4\11"+
    "\4\0\1\11\2\0\16\11\2\0\5\11\1\162\1\163"+
    "\16\0\12\11\4\0\1\11\2\0\16\11\2\0\4\11"+
    "\1\164\2\11\16\0\12\11\4\0\1\11\2\0\16\11"+
    "\2\0\4\11\1\165\2\11\16\0\12\11\4\0\1\11"+
    "\2\0\16\11\2\0\6\11\1\166\16\0\12\11\4\0"+
    "\1\11\2\0\14\11\1\167\1\11\2\0\7\11\16\0"+
    "\12\11\21\0\1\170\50\0\1\143\4\0\3\143\56\0"+
    "\1\53\4\0\3\171\2\0\1\47\6\0\1\50\44\0"+
    "\1\172\4\0\4\172\1\0\1\172\4\0\1\172\6\0"+
    "\2\172\20\0\1\172\1\0\1\172\1\0\2\172\10\0"+
    "\1\11\2\0\16\11\2\0\1\11\1\173\5\11\16\0"+
    "\12\11\4\0\1\11\2\0\14\11\1\174\1\11\2\0"+
    "\7\11\16\0\12\11\4\0\1\11\2\0\16\11\2\0"+
    "\7\11\16\0\5\11\1\175\4\11\4\0\1\11\2\0"+
    "\16\11\2\0\7\11\16\0\5\11\1\176\4\11\4\0"+
    "\1\11\2\0\16\11\2\0\1\11\1\177\5\11\16\0"+
    "\12\11\4\0\1\11\2\0\15\11\1\200\2\0\7\11"+
    "\16\0\12\11\4\0\1\11\2\0\14\11\1\201\1\11"+
    "\2\0\7\11\16\0\12\11\4\0\1\11\2\0\15\11"+
    "\1\202\2\0\7\11\16\0\12\11\4\0\1\11\2\0"+
    "\16\11\2\0\2\11\1\203\4\11\16\0\12\11\4\0"+
    "\1\11\2\0\15\11\1\204\2\0\7\11\16\0\12\11"+
    "\22\0\1\205\47\0\1\53\4\0\3\206\2\0\1\47"+
    "\6\0\1\50\44\0\1\207\4\0\4\207\1\0\1\207"+
    "\4\0\1\207\6\0\2\207\20\0\1\207\1\0\1\207"+
    "\1\0\2\207\10\0\1\11\2\0\13\11\1\210\2\11"+
    "\2\0\7\11\16\0\12\11\4\0\1\11\2\0\15\11"+
    "\1\211\2\0\7\11\16\0\12\11\4\0\1\11\2\0"+
    "\16\11\2\0\7\11\16\0\10\11\1\212\1\11\4\0"+
    "\1\11\2\0\16\11\2\0\7\11\16\0\2\11\1\213"+
    "\7\11\4\0\1\11\2\0\16\11\2\0\7\11\16\0"+
    "\10\11\1\214\1\11\4\0\1\11\2\0\16\11\2\0"+
    "\5\11\1\215\1\11\16\0\12\11\23\0\1\216\46\0"+
    "\1\53\4\0\3\217\2\0\1\47\6\0\1\50\44\0"+
    "\1\220\4\0\4\220\1\0\1\220\4\0\1\220\6\0"+
    "\2\220\20\0\1\220\1\0\1\220\1\0\2\220\10\0"+
    "\1\11\2\0\16\11\2\0\4\11\1\221\2\11\16\0"+
    "\12\11\4\0\1\11\2\0\16\11\2\0\1\11\1\222"+
    "\5\11\16\0\12\11\4\0\1\11\2\0\15\11\1\223"+
    "\2\0\7\11\16\0\12\11\22\0\1\224\47\0\1\53"+
    "\4\0\3\225\2\0\1\47\6\0\1\50\44\0\1\226"+
    "\4\0\4\226\1\0\1\226\4\0\1\226\6\0\2\226"+
    "\20\0\1\226\1\0\1\226\1\0\2\226\10\0\1\11"+
    "\2\0\16\11\2\0\7\11\16\0\5\11\1\227\4\11"+
    "\4\0\1\11\2\0\12\11\1\230\3\11\2\0\7\11"+
    "\16\0\12\11\24\0\1\231\45\0\1\53\4\0\3\232"+
    "\2\0\1\47\6\0\1\50\44\0\1\233\4\0\4\233"+
    "\1\0\1\233\4\0\1\233\6\0\2\233\20\0\1\233"+
    "\1\0\1\233\1\0\2\233\10\0\1\11\2\0\14\11"+
    "\1\234\1\11\2\0\7\11\16\0\12\11\4\0\1\11"+
    "\2\0\16\11\2\0\2\11\1\235\4\11\16\0\12\11"+
    "\4\0\1\53\4\0\3\236\2\0\1\47\6\0\1\50"+
    "\44\0\1\237\4\0\4\237\1\0\1\237\4\0\1\237"+
    "\6\0\2\237\20\0\1\237\1\0\1\237\1\0\2\237"+
    "\10\0\1\11\2\0\16\11\2\0\7\11\16\0\11\11"+
    "\1\240\4\0\1\53\4\0\3\241\2\0\1\47\6\0"+
    "\1\50\44\0\1\11\2\0\16\11\2\0\7\11\16\0"+
    "\10\11\1\242\1\11\4\0\1\53\4\0\3\243\2\0"+
    "\1\47\6\0\1\50\44\0\1\53\4\0\3\244\2\0"+
    "\1\47\6\0\1\50\44\0\1\53\4\0\3\245\2\0"+
    "\1\47\6\0\1\50\44\0\1\53\4\0\3\246\2\0"+
    "\1\47\6\0\1\50\44\0\1\53\4\0\3\247\2\0"+
    "\1\47\6\0\1\50\40\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  9,  9,  1,  1,  9,  1,  1,  1,  1,  1,  9,  1,  1, 
     1,  1,  9,  1,  9,  1,  9,  9,  9,  9,  9,  9,  9,  1,  9,  9, 
     1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  0,  1,  1,  1,  0,  1, 
     1,  1,  0,  1,  1,  1,  1,  1,  1,  9,  9,  9,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  1,  1,  1,  1,  1,  1, 
     9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  0,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  9,  1, 
     1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    
	public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    /*private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
        System.out.println("<" + name + ", " + yytext() + "> (Linha = " + yyline + "; Coluna = " + yycolumn + ")");
    
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    
    private Symbol symbol(String name, int sym, Object val) {
            System.out.println("<" + name + ", " + yytext() + "> (" + yyline + " - " + yycolumn + ")");
            
            Location left = new Location(yyline+1,yycolumn+1,yychar);
            Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
        
            return symbolFactory.newSymbol(name, sym, left, right,val);
    }*/
    
    public Symbol ultimo;
	public String tok;
	
    /*
    * Retorna de sÃ­mbolos identificados pelo analisador lexico
    * O simbolo retornado Ã© um objeto da classe ComplexSymbolFactory implementada pelo CUP
    * Tambem Ã© retornada a localizaÃ§Ã£o do sÃ­mbolo no arquivo, Ãºtil para fins de feedback ao usuÃ¡rio sobre a  posiÃ§Ã£o do erro (caso haja)
    * Voces provavelmente vao precisar sobrecarregar essa funcao para cobrir todos os tipos de simbolo q vcs precisam retornar
    */
    public Symbol symbol(String nome, int code) {
    	System.out.println("<" + nome + ", " + yytext() + "> (" + yyline + " - " + yycolumn + ")");
    	
        ultimo = symbolFactory.newSymbol(nome, code,
                            new Location(yyline+1, yycolumn+1, yychar),
                            new Location(yyline+1, yycolumn+yylength(), yychar+yylength()));
                                  
       tok = yytext();
       return ultimo;
    }
	
	public Symbol symbol(String nome, int code, Object val) {
    	System.out.println("<" + nome + ", " + yytext() + "> (" + yyline + " - " + yycolumn + ")");
    	
		ultimo = symbolFactory.newSymbol(nome, code,
                            new Location(yyline+1, yycolumn+1, yychar),
                            new Location(yyline+1, yycolumn+yylength(), yychar+yylength()),
                            val);                            
        
	    tok = yytext();
	    return ultimo;
    }
    
    public Symbol symbol(String nome, int code, String val) {
    	System.out.println("<" + nome + ", " + val + "> (" + yyline + " - " + yycolumn + ")");
    	
        ultimo = symbolFactory.newSymbol(nome, code,
                            new Location(yyline+1, yycolumn+1, yychar),
                            new Location(yyline+1, yycolumn+yylength(), yychar+yylength()),
                            val);
                                    
		tok = yytext();
		return ultimo;
	}
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[6642];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2262) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 43: 
        case 44: 
        case 45: 
        case 74: 
        case 100: 
        case 120: 
        case 133: 
        case 142: 
        case 148: 
        case 153: 
        case 157: 
        case 160: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
          {  return symbol("OCTAL", DIGIT, (yytext()));  }
        case 168: break;
        case 75: 
        case 76: 
        case 101: 
        case 121: 
        case 134: 
        case 143: 
        case 149: 
        case 154: 
        case 158: 
          {  return symbol("HEXA", DIGIT, (yytext()));  }
        case 169: break;
        case 20: 
          {  return symbol("NOT", NOT);  }
        case 170: break;
        case 6: 
          {  return symbol("DIV", DIV);  }
        case 171: break;
        case 12: 
          {  return symbol("DOT", DOT);  }
        case 172: break;
        case 57: 
          {  return symbol("AND", AND);  }
        case 173: break;
        case 89: 
          {  return symbol("FOR", FOR);  }
        case 174: break;
        case 135: 
          {  return symbol("RETURN", RETURN, yytext());  }
        case 175: break;
        case 118: 
          {  return symbol("CASE", CASE);  }
        case 176: break;
        case 112: 
          {  return symbol("FUNC", FUNC, yytext());  }
        case 177: break;
        case 104: 
          {  return symbol("TYPE", TYPE);  }
        case 178: break;
        case 23: 
          {  return symbol("RPAR", RPAR);  }
        case 179: break;
        case 22: 
          {  return symbol("LPAR", LPAR);  }
        case 180: break;
        case 18: 
          {  return symbol("PLUS", PLUS);  }
        case 181: break;
        case 3: 
          {  	String num = "[-]?\\d*[.]?\\d+";
    								String id = "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b";
    								if (tok != null) {
	    								if (Pattern.matches(num, tok )){ return symbol("SEMICOLON",SEMICOLON);}
	    								if (Pattern.matches(id, tok )){ return symbol("SEMICOLON",SEMICOLON);}
	    								if (tok.equals("return")){ return symbol("SEMICOLON",SEMICOLON);}
	    								if (tok.equals("}")){ return symbol("SEMICOLON",SEMICOLON);}
	    								if (tok.equals("]")){ return symbol("SEMICOLON",SEMICOLON);}
	    								if (tok.equals(")")){ return symbol("SEMICOLON",SEMICOLON);}
	    								if (tok.equals("fallthrough")){ return symbol("SEMICOLON",SEMICOLON);}
    								}							
    							  }
        case 182: break;
        case 7: 
          {  return symbol("MULT", MULT);  }
        case 183: break;
        case 8: 
        case 10: 
        case 11: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 47: 
        case 48: 
        case 49: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 60: 
        case 61: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 77: 
        case 78: 
        case 79: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 90: 
        case 91: 
        case 92: 
        case 94: 
        case 95: 
        case 96: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 111: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 122: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 130: 
        case 138: 
        case 139: 
        case 140: 
        case 144: 
        case 145: 
        case 150: 
        case 151: 
        case 156: 
        case 159: 
          {  return symbol("ID", ID, yytext());  }
        case 184: break;
        case 59: 
          {  return symbol("DASSIGN", DASSIGN, yytext());  }
        case 185: break;
        case 88: 
          {  return symbol("INT32", INT32, yytext());  }
        case 186: break;
        case 102: 
          {  return symbol("ELSE", ELSE);  }
        case 187: break;
        case 4: 
        case 40: 
          {   }
        case 188: break;
        case 24: 
          {  return symbol("LT", LT);  }
        case 189: break;
        case 58: 
          {  return symbol("EQ", EQ);  }
        case 190: break;
        case 62: 
          {  return symbol("IF", IF);  }
        case 191: break;
        case 2: 
        case 19: 
          {  emit_warning("Caracter não reconhecido '" + yytext() + "' -- ignorado");  }
        case 192: break;
        case 5: 
        case 9: 
          {  return symbol("INT_NUMBER", INT_NUMBER, new Integer(yytext()));  }
        case 193: break;
        case 137: 
          {  return symbol("SWITCH", SWITCH);  }
        case 194: break;
        case 103: 
          {  return symbol("TRUE", TRUE, true);  }
        case 195: break;
        case 136: 
          {  return symbol("STRUCT", STRUCT);  }
        case 196: break;
        case 128: 
          {  return symbol("FALSE", FALSE, false);  }
        case 197: break;
        case 21: 
          {  return symbol("ASSIGN", ASSIGN);  }
        case 198: break;
        case 161: 
          {  return symbol("FALLTHROUGH", FALLTHROUGH);  }
        case 199: break;
        case 155: 
          {  return symbol("INTERFACE", INTERFACE);  }
        case 200: break;
        case 123: 
          {  return symbol("RANGE", RANGE);  }
        case 201: break;
        case 129: 
          {  return symbol("FLOAT64", FLOAT64);  }
        case 202: break;
        case 110: 
          {  return symbol("BOOLEAN", BOOLEAN);  }
        case 203: break;
        case 39: 
        case 98: 
        case 147: 
        case 152: 
          {  return symbol("FLOAT_NUMBER", FLOAT_NUMBER, new Float(yytext()));  }
        case 204: break;
        case 80: 
          {  return symbol("DOTDOTDOT", DOTDOTDOT);  }
        case 205: break;
        case 13: 
          {  return symbol("MINUS", MINUS);  }
        case 206: break;
        case 105: 
          {  return symbol("BOOLEAN", BOOLEAN, new Boolean(yytext()));  }
        case 207: break;
        case 146: 
          {  return symbol("DEFAULT", DEFAULT);  }
        case 208: break;
        case 31: 
          {  return symbol("SEMICOLON", SEMICOLON, yytext().intern());  }
        case 209: break;
        case 131: 
          {  return symbol("CONST", CONST);  }
        case 210: break;
        case 29: 
          {  return symbol("COLON", COLON);  }
        case 211: break;
        case 30: 
          {  return symbol("COMMA", COMMA);  }
        case 212: break;
        case 26: 
          {  return symbol("RSBRACK", RSBRACK);  }
        case 213: break;
        case 25: 
          {  return symbol("LSBRACK", LSBRACK);  }
        case 214: break;
        case 27: 
          {  return symbol("LBRACK", LBRACK);  }
        case 215: break;
        case 28: 
          {  return symbol("RBRACK", RBRACK);  }
        case 216: break;
        case 93: 
          {  return symbol("VAR", VAR, yytext().intern());  }
        case 217: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
